---
alwaysApply: false
---

# Controller Validation & Compatibility Rules

## ‚ö° **AUTO-APPLY INSTRUCTIONS**
**This file should be automatically read and applied to every Controller processing request.**
**Follow these rules EXACTLY as specified below.**

## üéØ **Core Requirements**

### **1. Controller-Request Compatibility (CRITICAL)**
- **Request Validation**: Every Controller method must use proper Request classes for validation
- **Method Signatures**: Controller method signatures must match Request class expectations
- **Validation Rules**: Request classes must have comprehensive validation rules matching Controller requirements
- **Type Hints**: All Request parameters must have proper type hints
- **Error Handling**: Request classes must handle validation errors properly
- **Security Validation**: Request classes must implement proper security validation rules

### **2. Controller-Model Compatibility (CRITICAL)**
- **Model Relationships**: Models must have proper relationships that Controllers expect
- **Model Methods**: Models must have methods that Controllers use
- **Fillable Properties**: Models must have proper fillable/guarded properties for mass assignment
- **Accessors/Mutators**: Models must have proper data transformation methods
- **Scopes**: Models must have query scopes used by Controllers
- **Event Handling**: Models must have proper event handling if needed

### **3. Database Migration Compatibility (CRITICAL)**
- **Table Structure**: Controllers must work with existing database table structure
- **Column Names**: Controller field names must match database column names
- **Data Types**: Controller data handling must match database column types
- **Relationships**: Controller relationships must match database foreign key constraints
- **Indexes**: Controller queries must work with existing database indexes

### **4. Existing Data Compatibility (CRITICAL)**
- **No New Tables**: Do not create new database tables unless absolutely necessary
- **Use Existing Structure**: Work with existing database structure from migrations
- **Data Integrity**: Ensure Controllers work with existing data
- **Backward Compatibility**: Maintain compatibility with existing data
- **Migration Review**: Review all migrations to understand existing structure

## üîß **Implementation Guidelines**

### **AUTO-PROCESSING RULES:**
**When ANY Controller is sent for processing, automatically apply these rules:**

1. **AUTO-REVIEW**: Review Controller methods and identify required Request classes
2. **AUTO-VALIDATE**: Validate Request classes exist and have proper validation rules
3. **AUTO-CHECK**: Check Model compatibility with Controller usage
4. **AUTO-MIGRATION**: Review database migrations to understand existing structure
5. **AUTO-COMPATIBILITY**: Ensure Controller works with existing database structure
6. **AUTO-TEST**: Verify Controller works without errors
7. **AUTO-OPTIMIZE**: Optimize Controller for existing data structure

### **Controller Processing Rules:**
1. Work on ONE Controller at a time
2. Don't move to another Controller until current one is completely finished
3. Ensure Controller works without errors
4. Follow compatibility rules precisely
5. **MANDATORY**: Review and validate corresponding Request classes
6. **MANDATORY**: Review and validate corresponding Models
7. **MANDATORY**: Review database migrations for existing structure
8. **MANDATORY**: Ensure Controller works with existing data

### **When Processing Controllers:**
1. **Request Class Review**: Identify all Request classes used in Controller methods
2. **Request Validation**: Ensure Request classes have proper validation rules
3. **Model Review**: Identify all Models used in Controller methods
4. **Model Compatibility**: Ensure Models have required relationships and methods
5. **Migration Review**: Review database migrations to understand existing structure
6. **Data Compatibility**: Ensure Controller works with existing database structure
7. **Error Handling**: Implement proper error handling for all operations
8. **Security Measures**: Implement security measures in Controllers

## üìã **Controller-Request Compatibility Checklist**

### **Request Class Requirements:**
- [ ] Request class exists for each Controller method that needs validation
- [ ] Request class has comprehensive validation rules
- [ ] Request class has proper type hints
- [ ] Request class handles validation errors properly
- [ ] Request class implements security validation
- [ ] Request class has custom validation messages
- [ ] Request class has authorization rules if needed
- [ ] Request class has file upload validation for file operations

### **Controller Method Requirements:**
- [ ] Controller methods use proper Request classes
- [ ] Controller method signatures match Request expectations
- [ ] Controller methods handle validation errors properly
- [ ] Controller methods implement proper error handling
- [ ] Controller methods use database transactions for data operations
- [ ] Controller methods implement security measures
- [ ] Controller methods have proper return types
- [ ] Controller methods have comprehensive PHPDoc comments

## üìã **Controller-Model Compatibility Checklist**

### **Model Requirements:**
- [ ] Model has proper relationships (hasMany, belongsTo, etc.)
- [ ] Model has methods that Controller uses
- [ ] Model has proper fillable/guarded properties
- [ ] Model has accessors/mutators for data transformation
- [ ] Model has query scopes used by Controller
- [ ] Model has proper event handling if needed
- [ ] Model has proper type hints and return types
- [ ] Model has comprehensive PHPDoc comments

### **Controller-Model Integration:**
- [ ] Controller uses Model relationships properly
- [ ] Controller uses Model methods correctly
- [ ] Controller handles Model errors properly
- [ ] Controller implements proper data validation
- [ ] Controller uses Model scopes for queries
- [ ] Controller handles Model events properly
- [ ] Controller implements proper data transformation
- [ ] Controller uses Model accessors/mutators correctly

## üìã **Database Migration Compatibility Checklist**

### **Migration Review Requirements:**
- [ ] Review all database migrations to understand existing structure
- [ ] Identify existing tables and their columns
- [ ] Identify existing relationships and foreign keys
- [ ] Identify existing indexes and constraints
- [ ] Understand existing data types and constraints
- [ ] Review existing seeders for sample data
- [ ] Understand existing database structure completely

### **Controller-Database Compatibility:**
- [ ] Controller field names match database column names
- [ ] Controller data types match database column types
- [ ] Controller relationships match database foreign keys
- [ ] Controller queries work with existing indexes
- [ ] Controller handles existing data properly
- [ ] Controller maintains data integrity
- [ ] Controller works with existing constraints
- [ ] Controller implements proper data validation

## üìã **Existing Data Compatibility Checklist**

### **Data Structure Requirements:**
- [ ] Controller works with existing database tables
- [ ] Controller works with existing data
- [ ] Controller maintains data integrity
- [ ] Controller handles existing relationships
- [ ] Controller works with existing constraints
- [ ] Controller implements proper data validation
- [ ] Controller handles existing data types
- [ ] Controller maintains backward compatibility

### **No New Creation Requirements:**
- [ ] Do not create new database tables
- [ ] Do not create new database columns
- [ ] Do not create new database relationships
- [ ] Do not create new database indexes
- [ ] Use existing database structure
- [ ] Work with existing data
- [ ] Maintain existing functionality
- [ ] Preserve existing data integrity

## üîç **Controller Analysis Commands**

### **Request Class Analysis:**
```bash
# Find Request classes used in Controllers
grep -r "Request" app/Http/Controllers/ --include="*.php" | grep -v "Illuminate"

# Check Request class validation rules
grep -r "rules()" app/Http/Requests/ --include="*.php"

# Check Request class type hints
grep -r "public function" app/Http/Requests/ --include="*.php"
```

### **Model Analysis:**
```bash
# Find Models used in Controllers
grep -r "::" app/Http/Controllers/ --include="*.php" | grep -v "Illuminate\|App"

# Check Model relationships
grep -r "hasMany\|belongsTo\|hasOne\|belongsToMany" app/Models/ --include="*.php"

# Check Model methods
grep -r "public function" app/Models/ --include="*.php"
```

### **Migration Analysis:**
```bash
# List all migrations
ls -la database/migrations/

# Check migration table structures
grep -r "Schema::create\|Schema::table" database/migrations/ --include="*.php"

# Check migration relationships
grep -r "foreign\|references" database/migrations/ --include="*.php"
```

## üìù **Controller Processing Examples**

### **‚úÖ CORRECT - Controller with proper Request and Model compatibility:**
```php
/**
 * Product Controller with enhanced compatibility
 * 
 * This controller handles product management with proper Request validation
 * and Model compatibility, working with existing database structure.
 * 
 * @package App\Http\Controllers\Admin
 


 */
class ProductController extends Controller
{
    /**
     * Store a newly created product with proper validation.
     * 
     * Creates a new product using validated request data and existing
     * database structure with proper error handling.
     * 
     * @param ProductStoreRequest $request The validated request containing product data
     * @return RedirectResponse Redirect to product view or back with error
     * @throws \Exception When database operations fail
     */
    public function store(ProductStoreRequest $request): RedirectResponse
    {
        try {
            DB::beginTransaction();
            
            // Use existing database structure
            $product = Product::create($request->validated());
            
            // Use existing Model relationships
            if ($request->has('categories')) {
                $product->categories()->attach($request->categories);
            }
            
            DB::commit();
            
            return redirect()->route('admin.products.show', $product)
                ->with('success', __('admin.products.created_successfully'));
                
        } catch (\Exception $e) {
            DB::rollBack();
            Log::error('Product creation failed: ' . $e->getMessage());
            
            return back()->withInput()
                ->with('error', __('admin.products.creation_failed'));
        }
    }
}
```

### **‚ùå WRONG - Controller without proper compatibility:**
```php
/**
 * ‚ùå WRONG - Controller without proper Request/Model compatibility
 */
class ProductController extends Controller
{
    /**
     * ‚ùå WRONG - No Request class validation
     */
    public function store(Request $request): RedirectResponse
    {
        // ‚ùå WRONG - No validation
        $product = Product::create($request->all());
        
        // ‚ùå WRONG - No error handling
        return redirect()->route('admin.products.index');
    }
}
```

## üßπ **Compatibility Validation Process**

### **Step 1: Request Class Validation**
1. **Identify Required Requests**: Find all Request classes needed by Controller methods
2. **Validate Request Existence**: Ensure Request classes exist
3. **Check Validation Rules**: Verify Request classes have proper validation rules
4. **Check Type Hints**: Ensure Request classes have proper type hints
5. **Check Security Rules**: Verify Request classes implement security validation
6. **Check Error Handling**: Ensure Request classes handle validation errors

### **Step 2: Model Compatibility Validation**
1. **Identify Required Models**: Find all Models used by Controller methods
2. **Check Model Relationships**: Verify Models have required relationships
3. **Check Model Methods**: Ensure Models have methods used by Controllers
4. **Check Model Properties**: Verify Models have proper fillable/guarded properties
5. **Check Model Scopes**: Ensure Models have query scopes used by Controllers
6. **Check Model Events**: Verify Models have proper event handling

### **Step 3: Database Migration Review**
1. **Review All Migrations**: Understand existing database structure
2. **Identify Existing Tables**: List all existing database tables
3. **Identify Existing Columns**: List all existing database columns
4. **Identify Existing Relationships**: List all existing foreign key relationships
5. **Identify Existing Indexes**: List all existing database indexes
6. **Understand Data Types**: Understand existing column data types

### **Step 4: Data Compatibility Validation**
1. **Check Field Compatibility**: Ensure Controller fields match database columns
2. **Check Data Type Compatibility**: Ensure Controller data types match database types
3. **Check Relationship Compatibility**: Ensure Controller relationships match database foreign keys
4. **Check Query Compatibility**: Ensure Controller queries work with existing indexes
5. **Check Data Integrity**: Ensure Controller maintains data integrity
6. **Check Backward Compatibility**: Ensure Controller works with existing data

## üìã **Final Checklist for Each Controller:**
- [ ] **Request Class Compatibility**: All Request classes exist and have proper validation
- [ ] **Model Compatibility**: All Models have required relationships and methods
- [ ] **Database Compatibility**: Controller works with existing database structure
- [ ] **Data Compatibility**: Controller works with existing data
- [ ] **No New Creation**: Controller uses existing structure without creating new tables
- [ ] **Error Handling**: Controller has proper error handling for all operations
- [ ] **Security Measures**: Controller implements proper security measures
- [ ] **Validation**: Controller uses proper Request validation
- [ ] **Transactions**: Controller uses database transactions for data operations
- [ ] **Logging**: Controller has proper error logging (no success logging)
- [ ] **PHPDoc**: Controller has comprehensive PHPDoc comments
- [ ] **Type Hints**: Controller has proper type hints and return types
- [ ] **Testing**: Controller works without errors
- [ ] **Integration**: Controller integrates properly with existing system

## üö´ **Common Issues to Avoid:**
- **Missing Request Classes**: Controllers without proper Request validation
- **Missing Model Methods**: Controllers using non-existent Model methods
- **Database Incompatibility**: Controllers not working with existing database structure
- **Data Incompatibility**: Controllers not working with existing data
- **New Table Creation**: Creating new database tables when existing ones can be used
- **Missing Relationships**: Controllers not using existing Model relationships
- **Missing Validation**: Controllers without proper input validation
- **Missing Error Handling**: Controllers without proper error handling
- **Missing Security**: Controllers without proper security measures
- **Missing Documentation**: Controllers without proper PHPDoc comments

## ‚úÖ **Success Criteria:**
- All Controllers work with existing Request classes
- All Controllers work with existing Models
- All Controllers work with existing database structure
- All Controllers work with existing data
- No new database tables created unnecessarily
- All Controllers have proper error handling
- All Controllers implement security measures
- All Controllers have comprehensive documentation
- All Controllers work without errors
- All Controllers integrate properly with existing system

## ü§ñ **AUTO-EXECUTION COMMANDS**
**These commands should be automatically executed for every Controller:**

```bash
# Auto-check Request class compatibility
grep -r "Request" app/Http/Controllers/ --include="*.php" | grep -v "Illuminate"

# Auto-check Model compatibility
grep -r "::" app/Http/Controllers/ --include="*.php" | grep -v "Illuminate\|App"

# Auto-check database migration structure
grep -r "Schema::create\|Schema::table" database/migrations/ --include="*.php"

# Auto-check existing data compatibility
grep -r "create\|update\|delete" app/Http/Controllers/ --include="*.php"

# Auto-validate Controller functionality
php artisan route:list | grep -i controller

# Auto-check for missing Request classes
find app/Http/Controllers/ -name "*.php" -exec grep -l "Request" {} \; | xargs -I {} sh -c 'echo "Checking {}"; grep -n "Request" {}'

# Auto-check for missing Model methods
find app/Http/Controllers/ -name "*.php" -exec grep -l "::" {} \; | xargs -I {} sh -c 'echo "Checking {}"; grep -n "::" {}'

# Auto-review database migrations
find database/migrations/ -name "*.php" -exec grep -l "Schema::" {} \; | xargs -I {} sh -c 'echo "Migration: {}"; grep -n "Schema::" {}'
```

## üìã **AUTO-CHECKLIST (Execute for every Controller):**
- [ ] **AUTO-REQUEST**: Request class compatibility verified
- [ ] **AUTO-MODEL**: Model compatibility verified
- [ ] **AUTO-MIGRATION**: Database migration structure reviewed
- [ ] **AUTO-DATA**: Existing data compatibility verified
- [ ] **AUTO-NO-NEW**: No new database tables created
- [ ] **AUTO-ERROR**: Error handling implemented
- [ ] **AUTO-SECURITY**: Security measures implemented
- [ ] **AUTO-VALIDATION**: Request validation implemented
- [ ] **AUTO-TRANSACTION**: Database transactions implemented
- [ ] **AUTO-LOGGING**: Error logging implemented (no success logging)
- [ ] **AUTO-PHPDOC**: PHPDoc comments added
- [ ] **AUTO-TYPE-HINTS**: Type hints and return types added
- [ ] **AUTO-TEST**: Controller tested and working
- [ ] **AUTO-INTEGRATION**: Integration with existing system verified