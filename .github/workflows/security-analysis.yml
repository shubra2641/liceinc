name: Security Analysis

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 4 * * 1' # Run every Monday at 4 AM

jobs:
  security-analysis:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        extensions: mbstring, dom, fileinfo, mysql, pdo_mysql, zip, gd, curl, xml, bcmath, soap, intl, readline, libxml, openssl, tokenizer, ctype, json, iconv, session, filter, hash, opcache
    
    - name: Cache Composer dependencies
      uses: actions/cache@v3
      with:
        path: ~/.composer/cache
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-composer-
    
    - name: Install dependencies
      run: composer install --prefer-dist --no-progress --no-suggest
    
    - name: Run Composer Security Check
      run: |
        vendor/bin/security-checker security:check composer.lock
        
    - name: Run PHP Security Checker
      run: |
        vendor/bin/security-checker security:check
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
    
    - name: Run PHPStan with security rules
      run: |
        vendor/bin/phpstan analyse --memory-limit=1G --level=8 --error-format=github --no-progress
        
    - name: Check for sensitive data
      run: |
        echo "Checking for potential sensitive data..."
        if grep -r "password\|secret\|key\|token" --include="*.php" --include="*.env*" . | grep -v "vendor\|node_modules\|storage"; then
          echo "⚠️  Potential sensitive data found in code"
          exit 1
        else
          echo "✅ No obvious sensitive data found"
        fi
        
    - name: Check for SQL injection patterns
      run: |
        echo "Checking for potential SQL injection patterns..."
        if grep -r "DB::raw\|whereRaw\|selectRaw" --include="*.php" app/ | grep -v "vendor"; then
          echo "⚠️  Raw SQL queries found - please review for security"
        else
          echo "✅ No obvious raw SQL patterns found"
        fi
        
    - name: Check for XSS vulnerabilities
      run: |
        echo "Checking for potential XSS vulnerabilities..."
        if grep -r "echo\|print" --include="*.php" resources/views/ | grep -v "{{.*\|@.*"; then
          echo "⚠️  Potential XSS vulnerabilities found - please use proper escaping"
          exit 1
        else
          echo "✅ No obvious XSS patterns found"
        fi
        
    - name: Generate security report
      run: |
        echo "# Security Analysis Report" > security-report.md
        echo "Generated on: $(date)" >> security-report.md
        echo "" >> security-report.md
        echo "## Checks Performed:" >> security-report.md
        echo "- Composer security check" >> security-report.md
        echo "- Trivy vulnerability scan" >> security-report.md
        echo "- PHPStan security analysis" >> security-report.md
        echo "- Sensitive data check" >> security-report.md
        echo "- SQL injection pattern check" >> security-report.md
        echo "- XSS vulnerability check" >> security-report.md
        
    - name: Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: security-report.md
        retention-days: 30
