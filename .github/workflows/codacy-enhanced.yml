name: Enhanced Codacy Analysis

on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 2 * * 1' # Run every Monday at 2 AM

jobs:
  enhanced-codacy-analysis:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Shallow clones should be disabled for better analysis
    
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        extensions: mbstring, dom, fileinfo, mysql, pdo_mysql, zip, gd, curl, xml, bcmath, soap, intl, readline, libxml, openssl, tokenizer, ctype, json, iconv, session, filter, hash, opcache
        coverage: xdebug
    
    - name: Cache Composer dependencies
      uses: actions/cache@v3
      with:
        path: ~/.composer/cache
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: |
          ${{ runner.os }}-composer-
    
    - name: Install dependencies
      run: composer install --prefer-dist --no-progress --no-suggest
    
    - name: Run PHPUnit with coverage
      run: |
        vendor/bin/phpunit --configuration=phpunit.xml --coverage-html=storage/app/coverage/html --coverage-clover=storage/app/coverage/clover.xml --coverage-text=storage/app/coverage/coverage.txt
        
    - name: Enhanced Codacy Analysis
      uses: codacy/codacy-analysis-cli-action@master
      with:
        codacy-api-token: ${{ secrets.CODACY_PROJECT_TOKEN || 'IJ2F1RZG6BfH3B7FTRdl' }}
        directory: .
        tools: phpcs,phpstan,trivy,eslint
        output-format: json
        output-file: enhanced-codacy-results.json
        github-token: ${{ secrets.GITHUB_TOKEN }}
        comment-pr: true
        fail-build-on-issues: false
        max-issues: 1000
        
    - name: Run additional quality checks
      run: |
        # PHPStan analysis
        vendor/bin/phpstan analyse --memory-limit=1G --error-format=github --no-progress --level=8
        
        # PHP CodeSniffer
        vendor/bin/phpcs --standard=PSR12 --report=checkstyle --report-file=phpcs-report.xml app/
        
        # Laravel Pint
        vendor/bin/pint --test
        
        # Security check
        vendor/bin/security-checker security:check composer.lock
        
    - name: Generate enhanced report
      run: |
        echo "# Enhanced Codacy Analysis Report" > enhanced-report.md
        echo "Generated on: $(date)" >> enhanced-report.md
        echo "" >> enhanced-report.md
        echo "## Analysis Summary:" >> enhanced-report.md
        echo "- ✅ PHPUnit tests with coverage" >> enhanced-report.md
        echo "- ✅ Enhanced Codacy analysis" >> enhanced-report.md
        echo "- ✅ PHPStan static analysis" >> enhanced-report.md
        echo "- ✅ PHP CodeSniffer style check" >> enhanced-report.md
        echo "- ✅ Laravel Pint formatting" >> enhanced-report.md
        echo "- ✅ Security vulnerability scan" >> enhanced-report.md
        echo "" >> enhanced-report.md
        echo "## Coverage Information:" >> enhanced-report.md
        if [ -f "storage/app/coverage/coverage.txt" ]; then
          echo "\`\`\`" >> enhanced-report.md
          cat storage/app/coverage/coverage.txt >> enhanced-report.md
          echo "\`\`\`" >> enhanced-report.md
        fi
        
    - name: Upload enhanced reports
      uses: actions/upload-artifact@v3
      with:
        name: enhanced-codacy-reports
        path: |
          storage/app/coverage/
          enhanced-codacy-results.json
          phpcs-report.xml
          enhanced-report.md
        retention-days: 30
        
    - name: Comment PR with enhanced results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          let comment = '## 🔍 Enhanced Codacy Analysis Results\n\n';
          
          // Add coverage information
          if (fs.existsSync('storage/app/coverage/coverage.txt')) {
            const coverage = fs.readFileSync('storage/app/coverage/coverage.txt', 'utf8');
            comment += '### 📊 Test Coverage\n';
            comment += '```\n' + coverage + '\n```\n\n';
          }
          
          // Add Codacy results
          if (fs.existsSync('enhanced-codacy-results.json')) {
            const codacyResults = JSON.parse(fs.readFileSync('enhanced-codacy-results.json', 'utf8'));
            comment += '### 🎯 Codacy Quality Analysis\n';
            comment += `- **Total Issues**: ${codacyResults.summary?.totalIssues || 'N/A'}\n`;
            comment += `- **New Issues**: ${codacyResults.summary?.newIssues || 'N/A'}\n`;
            comment += `- **Fixed Issues**: ${codacyResults.summary?.fixedIssues || 'N/A'}\n\n`;
          }
          
          // Add quality checks
          comment += '### ✅ Quality Checks\n';
          comment += '- ✅ PHPStan static analysis completed\n';
          comment += '- ✅ PHP CodeSniffer style check completed\n';
          comment += '- ✅ Laravel Pint formatting check completed\n';
          comment += '- ✅ Security vulnerability scan completed\n\n';
          
          comment += '### 📋 Next Steps\n';
          comment += 'Please review any issues found and address them before merging.\n';
          comment += 'All reports are available in the workflow artifacts.';
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
